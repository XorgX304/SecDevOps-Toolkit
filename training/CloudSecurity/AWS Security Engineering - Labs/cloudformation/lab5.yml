AWSTemplateFormatVersion: "2010-09-09"
Description: "Security Engineering on AWS - Lab 5"
Parameters:
  KeyName:
    Type: String
    Description: Enter the name of the instance keypair you would like to use on the work instance
    Default: default-lab-key
  S3PathPrefix:
    Type: String
    Description: "The path prefix where lab resources are stored (Leading and trailing slash required!)"
    Default: "courses/ILT-TF-200-SISECO/v2.3.0/lab-5-config"
Mappings:
  RegionMap:
    "ap-northeast-1":
      "AMI": "ami-cbf90ecb"
    "ap-northeast-2":
      "AMI": "ami-249b554a"
    "ap-southeast-1":
      "AMI": "ami-68d8e93a"
    "ap-southeast-2":
      "AMI": "ami-fd9cecc7"
    "eu-central-1":
      "AMI": "ami-a8221fb5"
    "eu-west-1":
      "AMI": "ami-a10897d6"
    "sa-east-1":
      "AMI": "ami-b52890a8"
    "us-east-1":
      "AMI": "ami-97785bed"
    "us-east-2":
      "AMI": "ami-f63b1193"
    "us-west-1":
      "AMI": "ami-d114f295"
    "us-west-2":
      "AMI": "ami-e7527ed7"
Resources:
  CommandHostInstProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
      - !Ref CommandHostRole
      InstanceProfileName: CommandHostInstanceProfile
  CommandHostRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: 'Allow'
          Principal:
            Service: ['ec2.amazonaws.com']
          Action: ['sts:AssumeRole']
      Path: '/'
      Policies:
      - PolicyName: CommandHostRole
        PolicyDocument:
          Statement:
          - Effect:  'Allow'
            Action: [ 'lambda:*',
                      'iam:PassRole',
                      'config:*',
                      'events:*' ]
            Resource: '*'
  ConfigRole:
    Type: "AWS::IAM::Role"
    Properties:
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AWSConfigRole
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
        - Effect: "Allow"
          Principal:
            Service: "config.amazonaws.com"
          Action:
          - "sts:AssumeRole"
      Policies:
      - PolicyName: "ConfigCustomRule"
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
          - Effect: "Allow"
            Action: ["lambda:*", "s3:*", "sns:*"]
            Resource: "*"
      RoleName: ConfigRole
  LambdaRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
        - Effect: "Allow"
          Principal:
            Service: "lambda.amazonaws.com"
          Action:
          - "sts:AssumeRole"
      Policies:
      - PolicyName: LambdaRole
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
          - Effect: "Allow"
            Action: ["sns:Publish",
                     "s3:GetBucketAcl",
                     "s3:PutBucketAcl",
                     "s3:GetBucketPolicy",
                     "s3:GetBucketTagging",
                     "logs:CreateLogGroup",
                     "logs:CreateLogStream",
                     "logs:PutLogEvents" ]
            Resource: "*"
      RoleName: LambdaRole
  ConfigSNSTopic:
    Type: "AWS::SNS::Topic"
    Properties:
      DisplayName: ConfigSNSTopic
  ConfigBucket:
    Type: "AWS::S3::Bucket"
    Properties:
      AccessControl: LogDeliveryWrite
  ConfigBucketPolicy:
    Type: "AWS::S3::BucketPolicy"
    DependsOn: ConfigBucket
    Properties:
      Bucket: !Ref ConfigBucket
      PolicyDocument:
        Statement:
        - Effect: "Allow"
          Principal:
            Service: "config.amazonaws.com"
          Action:
          - "s3:PutObject"
          Resource:
            !Sub arn:aws:s3:::${ConfigBucket}/AWSLogs/${AWS::AccountId}/*
        - Effect: "Allow"
          Principal:
            Service: "config.amazonaws.com"
          Action:
          - "s3:GetBucketAcl"
          Resource:
            !Sub arn:aws:s3:::${ConfigBucket}
  PublicBucket:
    Type: "AWS::S3::Bucket"
    Properties:
      AccessControl: PublicRead
      BucketName: !Sub publicbucket-${AWS::AccountId}
      Tags:
      - Key: CanBePublic
        Value: 1
  PrivateBucket:
    Type: "AWS::S3::Bucket"
    Properties:
      AccessControl: PublicReadWrite
      BucketName: !Sub privatebucket-${AWS::AccountId}
      Tags:
      - Key: CanBePublic
        Value: 0
  VPC:
    Type: "AWS::EC2::VPC"
    Properties:
      CidrBlock: 10.0.0.0/24
      EnableDnsHostnames: true
      EnableDnsSupport: true
      Tags:
      - Key: Name
        Value:
          Ref: AWS::StackName
  PublicSubnet:
    Type: "AWS::EC2::Subnet"
    DependsOn: VPC
    Properties:
      CidrBlock: 10.0.0.0/24
      MapPublicIpOnLaunch: true
      VpcId: {Ref: VPC}
      Tags:
      - Key: Name
        Value:
          Fn::Join:
          - '-'
          - [{Ref: 'AWS::StackName'}, "a"]
  InternetGateway:
    Type: "AWS::EC2::InternetGateway"
    Properties:
      Tags:
      - Key: Name
        Value:
          Ref: AWS::StackName
  GatewayAttachment:
    Type: "AWS::EC2::VPCGatewayAttachment"
    DependsOn:
    - VPC
    - InternetGateway
    Properties:
      InternetGatewayId:
        Ref: InternetGateway
      VpcId:
        Ref: VPC
  RouteTable:
    Type: "AWS::EC2::RouteTable"
    DependsOn: VPC
    Properties:
      Tags:
      - Key: Name
        Value: {Ref: 'AWS::StackName'}
      VpcId:
        Ref: VPC
  PublicRoute:
    Type: "AWS::EC2::Route"
    DependsOn:
    - RouteTable
    - GatewayAttachment
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId:
        Ref: InternetGateway
      RouteTableId:
        Ref: RouteTable
  PublicTableAssociation:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    DependsOn:
    - RouteTable
    - PublicSubnet
    Properties:
      SubnetId:
        Ref: PublicSubnet
      RouteTableId:
        Ref: RouteTable
  SecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    DependsOn:
    - VPC
    Properties:
      GroupDescription: Allow user to ssh to host
      VpcId:
        Ref: VPC
      SecurityGroupIngress:
      -
        # SSH port
        IpProtocol: tcp
        FromPort: "22"
        ToPort: "22"
        CidrIp: 0.0.0.0/0
  CommandHost:
    Type: "AWS::EC2::Instance"
    DependsOn:
    - SecurityGroup
    - GatewayAttachment
    #CreationPolicy:
    #  ResourceSignal:
    #    Count: 1
    #    Timeout: PT10M
    Properties:
      IamInstanceProfile: !Ref CommandHostInstProfile
      KeyName: !Ref KeyName
      ImageId: !FindInMap [RegionMap, !Ref "AWS::Region", "AMI"]
      InstanceType: "t2.micro"
      NetworkInterfaces:
      -
        DeviceIndex: "0"
        AssociatePublicIpAddress: "true"
        SubnetId:
          Ref: PublicSubnet
        GroupSet:
        - Ref: SecurityGroup
      Tags:
      -
        Key: "Name"
        Value: "CommandHost"
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -ex
          yum -y update &&
          yum install -y aws-cli &&

          mkdir /home/ec2-user/.aws &&
          echo "[default]" > /home/ec2-user/.aws/config &&
          echo "region = ${AWS::Region}" >> /home/ec2-user/.aws/config &&

          curl -o /home/ec2-user/lambda_function.py https://${AWS::Region}-tcprod.s3.amazonaws.com/courses/ILT-TF-200-SISECO/v2.3.0/lab-5-config/lambda_function.py &&
          chown ec2-user.ec2-user /home/ec2-user/lambda_function.py

          #/usr/local/bin/cfn-signal --exit-code $? --stack ${AWS::StackName} --resource CommandHost --region ${AWS::Region}
Outputs:
  CommandHost:
    Value: !GetAtt CommandHost.PublicIp
    Description: Public IP of the Command Host
  ConfigRoleARN:
    Value: !GetAtt ConfigRole.Arn
    Description: Role ARN for AWS Config to use
  ConfigS3BucketName:
    Value: !Ref ConfigBucket
    Description: Bucket Name for AWS Config Logging
  ConfigSNSTopic:
    Value: !Ref ConfigSNSTopic
    Description: Topic ARN for AWS Config SNS Topic
  LambdaRoleARN:
    Value: !GetAtt LambdaRole.Arn
    Description: Role ARN for Lambda to use
  DefaultRegionName:
    Value: !Ref AWS::Region
    Description: Default AWS Region
