AWSTemplateFormatVersion: 2010-09-09
Description: 'Security Operations on AWS: Lab 6 - Using AWS KMS'
Parameters:
  VPCCIDR:
    Description: CIDR Block for VPC
    Type: String
    Default: 10.0.0.0/16
    AllowedValues:
    - 10.0.0.0/16
  PublicSubnet1Param:
    Description: Public Subnet 1
    Type: String
    Default: 10.0.10.0/24
    AllowedValues:
    - 10.0.10.0/24
  PrivateSubnet1Param:
    Description: Private Subnet 1
    Type: String
    Default: 10.0.20.0/24
    AllowedValues:
    - 10.0.20.0/24
  PrivateSubnet2Param:
    Description: Private Subnet 2
    Type: String
    Default: 10.0.30.0/24
    AllowedValues:
    - 10.0.30.0/24
  PrivateSubnet3Param:
    Description: Private Subnet 3
    Type: String
    Default: 10.0.40.0/24
    AllowedValues:
    - 10.0.40.0/24
  KeyName:
    Type: String
    Description: Keyname for the keypair that Qwiklab will use to launch EC2 instances
    Default: default-lab-key
  LabUrlPrefix:
    Description: Location of the Amazon S3 bucket to use for lab files
    Type: String
    Default: 'https://us-west-2-aws-staging.s3.amazonaws.com/awsu-ilt/AWS-200-SEC/v1.6'
Mappings:
  AmazonLinuxAMI:
    ap-northeast-1:
      AMI: ami-cbf90ecb
    ap-northeast-2:
      AMI: ami-249b554a
    ap-southeast-1:
      AMI: ami-68d8e93a
    ap-southeast-2:
      AMI: ami-fd9cecc7
    eu-central-1:
      AMI: ami-a8221fb5
    eu-west-1:
      AMI: ami-a10897d6
    sa-east-1:
      AMI: ami-b52890a8
    us-east-1:
      AMI: ami-1ecae776
    us-west-1:
      AMI: ami-d114f295
    us-west-2:
      AMI: ami-e7527ed7
Resources:
  VPC:
    Type: 'AWS::EC2::VPC'
    Properties:
      CidrBlock: !Ref VPCCIDR
      EnableDnsSupport: 'true'
      EnableDnsHostnames: 'true'
      Tags:
      - Key: VPC
        Value: JumpServer-and-CLI
      - Key: Name
        Value: Lab VPC
  InternetGateway:
    Type: 'AWS::EC2::InternetGateway'
    DependsOn: VPC
  AttachGateway:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    DependsOn:
    - VPC
    - InternetGateway
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway
  PublicSubnet1:
    Type: 'AWS::EC2::Subnet'
    DependsOn: AttachGateway
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref PublicSubnet1Param
      AvailabilityZone: !Select
      - '0'
      - !GetAZs ''
      Tags:
      - Key: Name
        Value: Public Subnet 1
  PrivateSubnet1:
    Type: 'AWS::EC2::Subnet'
    DependsOn: AttachGateway
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref PrivateSubnet1Param
      AvailabilityZone: !Select
      - '0'
      - !GetAZs ''
      Tags:
      - Key: Name
        Value: Private Subnet 1
  PrivateSubnet2:
    Type: 'AWS::EC2::Subnet'
    DependsOn: AttachGateway
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref PrivateSubnet2Param
      AvailabilityZone: !Select
      - '0'
      - !GetAZs ''
      Tags:
      - Key: Name
        Value: Private Subnet 2
  PrivateSubnet3:
    Type: 'AWS::EC2::Subnet'
    DependsOn: AttachGateway
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref PrivateSubnet3Param
      AvailabilityZone: !Select
      - '1'
      - !GetAZs ''
      Tags:
      - Key: Name
        Value: Private Subnet 3
  PublicRouteTable:
    Type: 'AWS::EC2::RouteTable'
    DependsOn:
    - VPC
    - AttachGateway
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: Public
  PublicRoute:
    Type: 'AWS::EC2::Route'
    DependsOn:
    - PublicRouteTable
    - AttachGateway
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
  PublicSubnet1RouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    DependsOn:
    - PublicRouteTable
    - PublicSubnet1
    - AttachGateway
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable
  AppSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    DependsOn:
    - AttachGateway
    Properties:
      GroupDescription: Enable internal access to the application server
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: AppSecurityGroup
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: '22'
        ToPort: '22'
        CidrIp: !Ref PublicSubnet1Param
      SecurityGroupEgress:
      - IpProtocol: tcp
        FromPort: '0'
        ToPort: '65535'
        CidrIp: 0.0.0.0/0
      - IpProtocol: udp
        FromPort: '0'
        ToPort: '65535'
        CidrIp: 0.0.0.0/0
  PrivateRouteTable:
    Type: 'AWS::EC2::RouteTable'
    DependsOn: AttachGateway
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: Private
  PrivateSubnet1RouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    DependsOn:
    - PublicRouteTable
    - PrivateSubnet1
    - AttachGateway
    Properties:
      SubnetId: !Ref PrivateSubnet1
      RouteTableId: !Ref PrivateRouteTable
  PrivateSubnet2RouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    DependsOn:
    - PublicRouteTable
    - PrivateSubnet2
    - AttachGateway
    Properties:
      SubnetId: !Ref PrivateSubnet2
      RouteTableId: !Ref PrivateRouteTable
  PrivateSubnet3RouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    DependsOn:
    - PublicRouteTable
    - PrivateSubnet3
    - AttachGateway
    Properties:
      SubnetId: !Ref PrivateSubnet3
      RouteTableId: !Ref PrivateRouteTable
  PrivateNetworkAcl:
    Type: 'AWS::EC2::NetworkAcl'
    DependsOn: AttachGateway
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Network
        Value: Private
  AppServer:
    Type: 'AWS::EC2::Instance'
    DependsOn:
    - AttachGateway
    - AppSecurityGroup
    - PrivateSubnet1
    Properties:
      ImageId: !FindInMap
      - AmazonLinuxAMI
      - !Ref 'AWS::Region'
      - AMI
      KeyName: !Ref KeyName
      InstanceType: t2.micro
      NetworkInterfaces:
      - DeviceIndex: '0'
        AssociatePublicIpAddress: 'false'
        SubnetId: !Ref PrivateSubnet1
        GroupSet:
        - !Ref AppSecurityGroup
      SourceDestCheck: 'false'
      Tags:
      - Key: Name
        Value: AppServer
      UserData: !Base64
        'Fn::Join':
        - |+

        - - '#!/bin/bash'
          - yum -y update
          - echo 1 > /proc/sys/net/ipv4/ip_forward
          - echo 0 > /proc/sys/net/ipv4/conf/eth0/send_redirects
          - >-
            /sbin/iptables -t nat -A POSTROUTING -o eth0 -s 0.0.0.0/0 -j
            MASQUERADE
          - /sbin/iptables-save > /etc/sysconfig/iptables
          - mkdir -p /etc/sysctl.d/
          - cat <<EOF > /etc/sysctl.d/nat.conf
          - net.ipv4.ip_forward = 1
          - net.ipv4.conf.eth0.send_redirects = 0
          - |
            EOF
  JumpServer:
    Type: 'AWS::EC2::Instance'
    DependsOn:
    - AttachGateway
    - PublicRoute
    - PublicSubnet1
    - WebSecurityGroup
    Properties:
      ImageId: !FindInMap
      - AmazonLinuxAMI
      - !Ref 'AWS::Region'
      - AMI
      KeyName: !Ref KeyName
      InstanceType: t2.micro
      NetworkInterfaces:
      - DeviceIndex: '0'
        AssociatePublicIpAddress: 'false'
        SubnetId: !Ref PublicSubnet1
        GroupSet:
        - !Ref WebSecurityGroup
      SourceDestCheck: 'false'
      Tags:
      - Key: Name
        Value: JumpServer
      UserData: !Base64
        'Fn::Join':
        - |+

        - - '#!/bin/bash'
          - yum -y update
          - echo 1 > /proc/sys/net/ipv4/ip_forward
          - echo 0 > /proc/sys/net/ipv4/conf/eth0/send_redirects
          - >-
            /sbin/iptables -t nat -A POSTROUTING -o eth0 -s 0.0.0.0/0 -j
            MASQUERADE
          - /sbin/iptables-save > /etc/sysconfig/iptables
          - mkdir -p /etc/sysctl.d/
          - cat <<EOF > /etc/sysctl.d/nat.conf
          - net.ipv4.ip_forward = 1
          - net.ipv4.conf.eth0.send_redirects = 0
          - |
            EOF
  PrivateRoute:
    Type: 'AWS::EC2::Route'
    DependsOn:
    - WebServer
    - JumpServer
    - AppServer
    - PrivateRouteTable
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      InstanceId: !Ref AppServer
  WebSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    DependsOn:
    - AttachGateway
    Properties:
      GroupDescription: Enable http access to the web server
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: WebSecurityGroup
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: '80'
        ToPort: '80'
        CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
      - IpProtocol: tcp
        FromPort: '0'
        ToPort: '65535'
        CidrIp: 0.0.0.0/0
      - IpProtocol: udp
        FromPort: '0'
        ToPort: '65535'
        CidrIp: 0.0.0.0/0
  RootRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - ec2.amazonaws.com
          Action:
          - 'sts:AssumeRole'
      Path: /
      Policies:
      - PolicyName: root
        PolicyDocument:
          Version: 2012-10-17
          Statement:
          - Effect: Allow
            Action: '*'
            Resource: '*'
  RootInstanceProfile:
    Type: 'AWS::IAM::InstanceProfile'
    DependsOn: RootRole
    Properties:
      Path: /
      Roles:
      - !Ref RootRole
  WaitHandle01:
    Type: 'AWS::CloudFormation::WaitConditionHandle'
    Properties: {}
  WaitCondition01:
    Type: 'AWS::CloudFormation::WaitCondition'
    DependsOn: WebServer
    Properties:
      Handle: !Ref WaitHandle01
      Timeout: '2400'
  WebServer:
    Type: 'AWS::EC2::Instance'
    DependsOn:
    - AttachGateway
    - PublicRoute
    - PublicSubnet1
    - WebSecurityGroup
    Properties:
      ImageId: !FindInMap
      - AmazonLinuxAMI
      - !Ref 'AWS::Region'
      - AMI
      KeyName: !Ref KeyName
      InstanceType: t2.micro
      NetworkInterfaces:
      - DeviceIndex: '0'
        AssociatePublicIpAddress: 'true'
        SubnetId: !Ref PublicSubnet1
        GroupSet:
        - !Ref WebSecurityGroup
      SourceDestCheck: 'false'
      Tags:
      - Key: Name
        Value: WebServer
      UserData: !Base64
        'Fn::Join':
        - ''
        - - |
            #!/bin/bash -ex
            - >-
            wget
            https://us-west-2-aws-staging.s3.amazonaws.com/awsu-ilt/AWS-200-SEC/v1.6/lab-8-kms/scripts/phpapp.zip
            - |+

            - >
            yum install -y git aws-cfn-bootstrap aws-apitools-common
            aws-apitools-ec2
            - |
            yum -y update
            - |
            yum -y install httpd php
            - |
            chkconfig httpd on
            - |
            unzip 'phpapp.zip' -d /var/www/html
            - |
            service httpd start
            - /opt/aws/bin/cfn-signal -s true '
            - !Ref WaitHandle01
            - |
            '
Outputs:
  KeyName:
    Value: !Ref KeyName
  SubnetId:
    Value: !Ref PublicSubnet1
